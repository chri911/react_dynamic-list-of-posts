{"version":3,"sources":["api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","getUserPosts","userId","a","fetch","response","json","posts","data","getPostDetails","postId","PostsList","setPostId","setPostOpen","useState","setPosts","selectedPostId","setSelectedPostId","fun","useEffect","className","map","post","key","id","title","type","onClick","getPostComments","comments","deleteComment","commentId","method","createComment","newComment","headers","body","JSON","stringify","NewCommentForm","newName","setName","email","setEmail","setBody","onSubmit","name","placeholder","value","onChange","event","target","PostDetails","setPost","setComments","isVisible","setVisibility","funComm","length","comment","App","setUserId","isPostOpen","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5900bab5.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const getUserPosts = async(userId) => {\n  const response = +userId === 0\n    ? await fetch(`${BASE_URL}/posts`)\n    : await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  const posts = await response.json();\n\n  return posts.data;\n};\n\nexport const getPostDetails = async(postId) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n  const posts = await response.json();\n\n  return posts.data;\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\nexport const PostsList = ({ userId, setPostId, setPostOpen }) => {\n  const [posts, setPosts] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const fun = async() => {\n    const response = await getUserPosts(userId);\n\n    setPosts(response);\n  };\n\n  useEffect(() => {\n    fun();\n  }, [userId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                [User #\n                {post.userId}\n                ]:\n                {' '}\n              </b>\n              {post.title}\n            </div>\n            {post.id !== selectedPostId\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    setPostOpen(true);\n                    setSelectedPostId(post.id);\n                    setPostId(post.id);\n                  }}\n                >\n                  Open\n                </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    setPostOpen(false);\n                    setSelectedPostId('');\n                  }}\n                >\n                  Close\n                  {/* {isPostOpen ? 'Close' : 'Open'} */}\n                </button>\n              )\n          }\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  userId: PropTypes.number.isRequired,\n  setPostId: PropTypes.func.isRequired,\n  setPostOpen: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const getPostComments = async(postId) => {\n  const response = await fetch(`${BASE_URL}/comments/?postId=${postId}`);\n  const comments = await response.json();\n\n  return comments.data;\n};\n\nexport const deleteComment = async(commentId) => {\n  const response = await fetch(\n    `${BASE_URL}/comments/${commentId}`, { method: 'DELETE' },\n  );\n\n  return response;\n};\n\nexport const createComment = async(newComment) => {\n  const response = await fetch(\n    `${BASE_URL}/comments`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json;charset=UTF-8',\n      },\n      body: JSON.stringify(newComment),\n    },\n  );\n  const comments = await response.json();\n\n  return comments;\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { createComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId }) => {\n  const [newName, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={() => {\n        const newComment = {\n          postId,\n          name: newName,\n          email,\n          body,\n        };\n\n        createComment(newComment);\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newName}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPostDetails } from '../../api/posts';\nimport { deleteComment, getPostComments } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState(0);\n  const [comments, setComments] = useState([]);\n  const [isVisible, setVisibility] = useState(true);\n\n  const fun = async() => {\n    const response = await getPostDetails(postId);\n\n    setPost(response);\n  };\n\n  useEffect(() => {\n    fun();\n  }, [postId]);\n\n  const funComm = async() => {\n    const response = await getPostComments(postId);\n\n    setComments(response);\n  };\n\n  useEffect(() => {\n    funComm();\n  }, [postId, comments]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setVisibility(!isVisible)}\n        >\n          {`${isVisible ? 'Hide' : 'Show'} ${comments.length} comments`}\n        </button>\n\n        {isVisible\n          && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li className=\"PostDetails__list-item\" key={comment.id}>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n          )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={postId} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [userId, setUserId] = useState(0);\n  const [postId, setPostId] = useState(1);\n  const [isPostOpen, setPostOpen] = useState(false);\n\n  const handleUserSelect = (event) => {\n    const { value } = event.target;\n\n    setUserId(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            value={userId}\n            className=\"App__user-selector\"\n            onChange={handleUserSelect}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={userId}\n            setPostId={setPostId}\n            setPostOpen={setPostOpen}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {isPostOpen && <PostDetails postId={postId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}